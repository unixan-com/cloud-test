#!/usr/bin/env ansible-playbook --inventory=dynamic-inventory.yaml
- name: Dynamically discern and tag EC2 instances
  hosts: all
  gather_facts: false # instances may not exist yet
  vars:
    debug: false
  tasks:

    - name: Fetch /var/www/html/index.html to inspect
      ansible.builtin.slurp:
        src: /var/www/html/index.html
      register: slurp_index_html
      failed_when: false # in case it's not a web server

    - name: Check various phrases in index.html
      when: slurp_index_html.content is defined
      vars:
        index_html: "{{ slurp_index_html.content | b64decode }}"
      block:

        - name: Well known HTML content on some web servers
          vars:
            tier: web
          loop:
            - team: sales
              html_content: <h1>Sales Directory</h1>
            - team: shipping
              html_content: <h1>Shipping Directory</h1>
          when: team is not defined and item.html_content in index_html
          ansible.builtin.set_fact:
            team: "{{ item.team }}"
            tier: "{{ tier }}"

    # more tests could go here, repeating the same pattern of fetching data and set_fact based on findings

    - name: Interact with cloud from localhost
      connection: local
      become: false
      block:

        - name: Get full EC2 instance info
          amazon.aws.ec2_instance_info:
            region: "{{ placement.region }}"
            instance_ids:
              - "{{ instance_id }}"
          register: instance_info

        - name: debug EC2 instance info
          when: debug
          ansible.builtin.debug:
            var: instance_info

        - name: Set the team tag on the instance
          when:
            - team is defined
            - tier is defined
          amazon.aws.ec2_tag:
            region: "{{ placement.region }}"
            resource: "{{ instance_id }}"
            tags:
              team: "{{ team }}"
              tier: "{{ tier }}"
          register: ec2_tag

    - name: Add to inventory for later reporting
      ansible.builtin.set_fact:
        # Here a jsonquery filter would probably pull out more customized data, but for now this is just
        # a list of the IP addresses on the instance to get a start on identifying network connectivity
        # between instances.
        inventory_contribution: >-
          {{ {
            (team | default('unknown_team')): {
              (tier | default('unknown_tier')): {
                (placement.region | default('unknown_region')): {
                  (placement.availability_zone | default('unknown_availability_zone')): {
                    inventory_hostname:
                      instance_info.instances[0].network_interfaces | map(attribute="private_ip_addresses") | flatten
                  }
                }
              }
            }
          } }}

- name: Print human-friendly inventory
  hosts: localhost
  gather_facts: false
  tasks:

    - name: Add all inventory contributions
      loop: "{{ hostvars.keys() }}"
      when: hostvars[item].inventory_contribution is defined
      ansible.builtin.set_fact:
        inventory: "{{ inventory | default({}) | combine(hostvars[item].inventory_contribution, recursive=true) }}"

    - name: Inventory
      ansible.builtin.debug:
        var: inventory
        # If using 'debug' stdout callback plugin, then one could instead use...
        #
        #   msg: "{{ inventory | to_yaml(width=1337) }}"
        #
        # ... to get a much human-friendlier output.  With default plugin, though,
        # debug var= is at least readable.
